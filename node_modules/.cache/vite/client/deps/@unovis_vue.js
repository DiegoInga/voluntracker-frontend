import {
  Annotations,
  Area,
  Axis,
  Brush,
  BulletLegend,
  ChordDiagram,
  Crosshair,
  Donut,
  FreeBrush,
  Graph,
  GroupedBar,
  LeafletFlowMap,
  LeafletMap,
  Line,
  NestedDonut,
  Sankey,
  Scatter,
  SingleContainer,
  StackedBar,
  Timeline,
  Tooltip,
  TopoJSONMap,
  XYContainer,
  XYLabels
} from "./chunk-3T5I34R6.js";
import "./chunk-LTQESCPQ.js";
import {
  isEqual
} from "./chunk-CZP75YZK.js";
import "./chunk-PR4QN5HX.js";

// node_modules/@unovis/vue/containers/xy-container/index.js
import { defineComponent as u2, toRefs as y, ref as p, reactive as v, watch as f2, watchEffect as x, toRaw as r, onMounted as h, onUnmounted as D, provide as a2, openBlock as g, createElementBlock as A, renderSlot as C } from "vue";

// node_modules/@unovis/vue/utils/context.js
var o = Symbol("componentAccessorKey");
var s = Symbol("tooltipAccessorKey");
var c = Symbol("crosshairAccessorKey");
var e = Symbol("axisAccessorKey");
var t = Symbol("annotationsAccessorKey");

// node_modules/@unovis/vue/utils/props.js
import { getCurrentInstance as a, computed as u, camelize as s2 } from "vue";
function f(t2, r3) {
  return isEqual(t2, r3);
}
function m(t2) {
  const r3 = a(), n = r3.attrs;
  return u(() => {
    const o2 = {}, c4 = (r3 == null ? void 0 : r3.vnode.props) ?? {};
    return Object.keys(c4).forEach((e2) => {
      o2[s2(e2)] = t2[s2(e2)];
    }), { ...o2, ...n };
  });
}

// node_modules/@unovis/vue/containers/xy-container/index.js
var $ = u2({
  __name: "index",
  props: {
    components: {},
    xScale: { type: [Object, Function] },
    xDomain: {},
    xDomainMinConstraint: {},
    xDomainMaxConstraint: {},
    xRange: {},
    yScale: { type: [Object, Function] },
    yDomain: {},
    yDomainMinConstraint: {},
    yDomainMaxConstraint: {},
    yRange: {},
    yDirection: {},
    xAxis: {},
    yAxis: {},
    autoMargin: { type: Boolean },
    tooltip: {},
    crosshair: {},
    preventEmptyDomain: { type: [Boolean, null] },
    scaleByDomain: { type: Boolean },
    annotations: {},
    duration: {},
    margin: {},
    padding: {},
    sizing: {},
    width: {},
    height: {},
    svgDefs: {},
    ariaLabel: {},
    data: {}
  },
  setup(d16, { expose: l7 }) {
    const c4 = d16, { data: t2 } = y(c4), m25 = m(c4), n = p(), e2 = v({
      components: [],
      annotations: void 0,
      crosshair: void 0,
      tooltip: void 0,
      xAxis: void 0,
      yAxis: void 0
    }), s7 = p();
    return f2(t2, () => {
      n.value && n.value.setData(t2.value, true);
    }), x(() => {
      var o2;
      e2.components.map((i6) => i6.config), (o2 = n.value) == null || o2.updateContainer({ ...r(m25.value), ...r(e2) });
    }), h(() => {
      s7.value && (n.value = new XYContainer(s7.value, { ...r(e2) }, t2.value));
    }), D(() => {
      var o2;
      return (o2 = n.value) == null ? void 0 : o2.destroy();
    }), a2(o, {
      data: t2,
      update: (o2) => e2.components = [...e2.components, o2],
      destroy: () => {
        var o2;
        return e2.components = (o2 = e2.components) == null ? void 0 : o2.filter((i6) => !i6.isDestroyed());
      }
    }), a2(e, {
      data: t2,
      update: (o2) => e2[`${o2.config.type}Axis`] = o2,
      destroy: (o2) => {
        e2[`${o2}Axis`] = void 0;
      }
    }), a2(c, {
      data: t2,
      update: (o2) => e2.crosshair = o2,
      destroy: () => {
        e2.crosshair = void 0;
      }
    }), a2(s, {
      data: t2,
      update: (o2) => e2.tooltip = o2,
      destroy: () => {
        e2.tooltip = void 0;
      }
    }), a2(t, {
      data: t2,
      update: (o2) => e2.annotations = o2,
      destroy: () => {
        e2.annotations = void 0;
      }
    }), l7({
      component: n
    }), (o2, i6) => (g(), A("div", {
      "data-vis-xy-container": "",
      ref_key: "elRef",
      ref: s7,
      class: "unovis-xy-container"
    }, [
      C(o2.$slots, "default")
    ], 512));
  }
});

// node_modules/@unovis/vue/containers/single-container/index.js
import { defineComponent as f3, toRefs as m2, reactive as u3, ref as v2, watchEffect as g2, watch as y2, onUnmounted as w, provide as a3, openBlock as _, createElementBlock as h2, renderSlot as C2, toRaw as s3 } from "vue";
var b = f3({
  __name: "index",
  props: {
    component: {},
    tooltip: {},
    annotations: {},
    duration: {},
    margin: {},
    padding: {},
    sizing: {},
    width: {},
    height: {},
    svgDefs: {},
    ariaLabel: {},
    data: {}
  },
  setup(c4, { expose: d16 }) {
    const r3 = c4, { data: n } = m2(r3), l7 = m(r3);
    let o2;
    const e2 = u3({
      component: void 0,
      tooltip: void 0,
      annotations: void 0
    }), i6 = v2(), p10 = () => {
      o2 || i6.value && e2.component && (o2 = new SingleContainer(i6.value, { ...s3(e2) }, n.value));
    };
    return g2(() => {
      var t2;
      p10(), (t2 = e2.component) == null || t2.config, o2 == null || o2.updateContainer({ ...s3(l7.value), ...s3(e2) });
    }), y2(n, () => {
      o2 ? o2.setData(n.value, true) : p10();
    }), w(() => o2 == null ? void 0 : o2.destroy()), a3(o, {
      data: n,
      update: (t2) => e2.component = t2,
      destroy: () => e2.component = void 0
    }), a3(s, {
      data: n,
      update: (t2) => e2.tooltip = t2,
      destroy: () => {
        e2.tooltip = void 0;
      }
    }), a3(t, {
      data: n,
      update: (t2) => e2.annotations = t2,
      destroy: () => {
        e2.annotations = void 0;
      }
    }), d16({
      component: o2
    }), (t2, B9) => (_(), h2("div", {
      "data-vis-single-container": "",
      ref_key: "elRef",
      ref: i6,
      class: "unovis-single-container"
    }, [
      C2(t2.$slots, "default")
    ], 512));
  }
});

// node_modules/@unovis/vue/components/area/index.js
import { defineComponent as d, inject as m3, computed as v3, ref as y3, onMounted as f4, nextTick as x2, onUnmounted as _2, watch as u4, openBlock as F, createElementBlock as b2 } from "vue";
var j = { "data-vis-component": "" };
var D2 = Area.selectors;
var P = d({
  __name: "index",
  props: {
    color: {},
    curveType: {},
    baseline: {},
    opacity: {},
    cursor: {},
    minHeight1Px: { type: Boolean },
    x: {},
    y: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(l7, { expose: p10 }) {
    const o2 = m3(o), c4 = l7, a4 = v3(() => o2.data.value ?? c4.data), n = m(c4), t2 = y3();
    return f4(() => {
      x2(() => {
        var e2;
        t2.value = new Area(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), _2(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), u4(n, (e2, r3) => {
      var s7;
      f(e2, r3) || (s7 = t2.value) == null || s7.setConfig(n.value);
    }), u4(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), p10({
      component: t2
    }), (e2, r3) => (F(), b2("div", j));
  }
});

// node_modules/@unovis/vue/components/axis/index.js
import { defineComponent as d2, inject as x3, computed as m4, ref as y4, onMounted as k, nextTick as T, onUnmounted as v4, watch as s4, openBlock as f5, createElementBlock as B } from "vue";
var b3 = { "data-vis-axis": "" };
var M = Axis.selectors;
var O = d2({
  __name: "index",
  props: {
    position: {},
    type: {},
    fullSize: { type: Boolean },
    label: {},
    labelFontSize: {},
    labelMargin: {},
    labelColor: {},
    gridLine: { type: Boolean },
    tickLine: { type: Boolean },
    domainLine: { type: Boolean },
    minMaxTicksOnly: { type: Boolean },
    minMaxTicksOnlyWhenWidthIsLess: {},
    tickFormat: { type: Function },
    tickValues: {},
    numTicks: {},
    tickTextFitMode: {},
    tickTextWidth: {},
    tickTextSeparator: {},
    tickTextForceWordBreak: { type: Boolean },
    tickTextTrimType: {},
    tickTextFontSize: {},
    tickTextAlign: {},
    tickTextColor: {},
    tickTextAngle: {},
    tickTextHideOverlapping: { type: Boolean },
    tickPadding: {},
    x: {},
    y: {},
    id: { type: Function },
    color: {},
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(p10, { expose: u13 }) {
    const o2 = x3(e), a4 = p10, n = m4(() => o2.data.value ?? a4.data), i6 = m(a4), t2 = y4();
    return k(() => {
      T(() => {
        var e2;
        t2.value = new Axis(i6.value), (e2 = t2.value) == null || e2.setData(n.value), o2.update(t2.value);
      });
    }), v4(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy(a4.type);
    }), s4(i6, (e2, c4) => {
      var l7;
      f(e2, c4) || (l7 = t2.value) == null || l7.setConfig(i6.value);
    }), s4(n, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(n.value);
    }), u13({
      component: t2
    }), (e2, c4) => (f5(), B("div", b3));
  }
});

// node_modules/@unovis/vue/components/brush/index.js
import { defineComponent as d3, inject as m5, computed as v5, ref as y5, onMounted as h3, nextTick as f6, onUnmounted as B2, watch as u5, openBlock as F2, createElementBlock as x4 } from "vue";
var S = { "data-vis-component": "" };
var D3 = Brush.selectors;
var E = d3({
  __name: "index",
  props: {
    onBrush: { type: Function },
    onBrushStart: { type: Function },
    onBrushMove: { type: Function },
    onBrushEnd: { type: Function },
    handleWidth: {},
    selection: {},
    draggable: { type: Boolean },
    handlePosition: {},
    selectionMinLength: {},
    x: {},
    y: {},
    id: { type: Function },
    color: {},
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(l7, { expose: p10 }) {
    const o2 = m5(o), c4 = l7, n = v5(() => o2.data.value ?? c4.data), a4 = m(c4), t2 = y5();
    return h3(() => {
      f6(() => {
        var e2;
        t2.value = new Brush(a4.value), (e2 = t2.value) == null || e2.setData(n.value), o2.update(t2.value);
      });
    }), B2(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), u5(a4, (e2, s7) => {
      var r3;
      f(e2, s7) || (r3 = t2.value) == null || r3.setConfig(a4.value);
    }), u5(n, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(n.value);
    }), p10({
      component: t2
    }), (e2, s7) => (F2(), x4("div", S));
  }
});

// node_modules/@unovis/vue/components/crosshair/index.js
import { defineComponent as d4, inject as m6, computed as v6, ref as f7, onMounted as _3, nextTick as h4, onUnmounted as x5, watch as u6, openBlock as C3, createElementBlock as k2 } from "vue";
var B3 = { "data-vis-crosshair": "" };
var q = Crosshair.selectors;
var A2 = d4({
  __name: "index",
  props: {
    data: {}
  },
  setup(l7, { expose: p10 }) {
    const t2 = m6(c), r3 = l7, a4 = v6(() => t2.data.value ?? r3.data), s7 = m(r3), o2 = f7();
    return _3(() => {
      h4(() => {
        var e2;
        o2.value = new Crosshair(s7.value), (e2 = o2.value) == null || e2.setData(a4.value), t2.update(o2.value);
      });
    }), x5(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), t2.destroy();
    }), u6(s7, (e2, n) => {
      var c4;
      f(e2, n) || (c4 = o2.value) == null || c4.setConfig(s7.value);
    }), u6(a4, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(a4.value);
    }), p10({
      component: o2
    }), (e2, n) => (C3(), k2("div", B3));
  }
});

// node_modules/@unovis/vue/components/free-brush/index.js
import { defineComponent as d5, inject as m7, computed as v7, ref as y6, onMounted as h5, nextTick as f8, onUnmounted as F3, watch as u7, openBlock as B4, createElementBlock as x6 } from "vue";
var g3 = { "data-vis-component": "" };
var D4 = FreeBrush.selectors;
var E2 = d5({
  __name: "index",
  props: {
    mode: {},
    onBrush: { type: Function },
    onBrushStart: { type: Function },
    onBrushMove: { type: Function },
    onBrushEnd: { type: Function },
    handleWidth: {},
    selection: {},
    selectionMinLength: {},
    autoHide: { type: Boolean },
    x: {},
    y: {},
    id: { type: Function },
    color: {},
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(l7, { expose: p10 }) {
    const o2 = m7(o), c4 = l7, n = v7(() => o2.data.value ?? c4.data), a4 = m(c4), t2 = y6();
    return h5(() => {
      f8(() => {
        var e2;
        t2.value = new FreeBrush(a4.value), (e2 = t2.value) == null || e2.setData(n.value), o2.update(t2.value);
      });
    }), F3(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), u7(a4, (e2, s7) => {
      var r3;
      f(e2, s7) || (r3 = t2.value) == null || r3.setConfig(a4.value);
    }), u7(n, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(n.value);
    }), p10({
      component: t2
    }), (e2, s7) => (B4(), x6("div", g3));
  }
});

// node_modules/@unovis/vue/components/grouped-bar/index.js
import { defineComponent as l, inject as m8, computed as v8, ref as f9, onMounted as y7, nextTick as x7, onUnmounted as g4, watch as u8, openBlock as _4, createElementBlock as b4 } from "vue";
var C4 = { "data-vis-component": "" };
var w2 = GroupedBar.selectors;
var D5 = l({
  __name: "index",
  props: {
    color: {},
    groupWidth: {},
    groupMaxWidth: {},
    dataStep: {},
    groupPadding: {},
    barPadding: {},
    roundedCorners: { type: [Number, Boolean] },
    barMinHeight: {},
    cursor: {},
    orientation: {},
    x: {},
    y: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(d16, { expose: p10 }) {
    const t2 = m8(o), r3 = d16, a4 = v8(() => t2.data.value ?? r3.data), n = m(r3), o2 = f9();
    return y7(() => {
      x7(() => {
        var e2;
        o2.value = new GroupedBar(n.value), (e2 = o2.value) == null || e2.setData(a4.value), t2.update(o2.value);
      });
    }), g4(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), t2.destroy();
    }), u8(n, (e2, c4) => {
      var s7;
      f(e2, c4) || (s7 = o2.value) == null || s7.setConfig(n.value);
    }), u8(a4, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(a4.value);
    }), p10({
      component: o2
    }), (e2, c4) => (_4(), b4("div", C4));
  }
});

// node_modules/@unovis/vue/components/line/index.js
import { defineComponent as d6, inject as m9, computed as v9, ref as y8, onMounted as f10, nextTick as h6, onUnmounted as x8, watch as i, openBlock as _5, createElementBlock as g5 } from "vue";
var b5 = { "data-vis-component": "" };
var O2 = Line.selectors;
var S2 = d6({
  __name: "index",
  props: {
    color: {},
    curveType: {},
    lineWidth: {},
    lineDashArray: {},
    fallbackValue: {},
    highlightOnHover: { type: Boolean },
    cursor: {},
    interpolateMissingData: { type: Boolean },
    x: {},
    y: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(u13, { expose: p10 }) {
    const o2 = m9(o), c4 = u13, a4 = v9(() => o2.data.value ?? c4.data), n = m(c4), t2 = y8();
    return f10(() => {
      h6(() => {
        var e2;
        t2.value = new Line(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), x8(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), i(n, (e2, r3) => {
      var s7;
      f(e2, r3) || (s7 = t2.value) == null || s7.setConfig(n.value);
    }), i(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), p10({
      component: t2
    }), (e2, r3) => (_5(), g5("div", b5));
  }
});

// node_modules/@unovis/vue/components/scatter/index.js
import { defineComponent as d7, inject as m10, computed as v10, ref as y9, onMounted as f11, nextTick as b6, onUnmounted as x9, watch as l2, openBlock as _6, createElementBlock as F4 } from "vue";
var k3 = { "data-vis-component": "" };
var w3 = Scatter.selectors;
var z = d7({
  __name: "index",
  props: {
    color: {},
    size: {},
    sizeScale: { type: [Object, Function] },
    sizeRange: {},
    shape: { type: [Function, String] },
    label: {},
    labelColor: {},
    labelHideOverlapping: { type: Boolean },
    cursor: {},
    labelTextBrightnessRatio: {},
    labelPosition: {},
    strokeColor: {},
    strokeWidth: {},
    x: {},
    y: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(u13, { expose: p10 }) {
    const o2 = m10(o), c4 = u13, a4 = v10(() => o2.data.value ?? c4.data), n = m(c4), t2 = y9();
    return f11(() => {
      b6(() => {
        var e2;
        t2.value = new Scatter(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), x9(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), l2(n, (e2, s7) => {
      var r3;
      f(e2, s7) || (r3 = t2.value) == null || r3.setConfig(n.value);
    }), l2(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), p10({
      component: t2
    }), (e2, s7) => (_6(), F4("div", k3));
  }
});

// node_modules/@unovis/vue/components/stacked-bar/index.js
import { defineComponent as p2, inject as m11, computed as v11, ref as f12, onMounted as y10, nextTick as x10, onUnmounted as b7, watch as i2, openBlock as _7, createElementBlock as h7 } from "vue";
var k4 = { "data-vis-component": "" };
var j2 = StackedBar.selectors;
var w4 = p2({
  __name: "index",
  props: {
    color: {},
    barWidth: {},
    barMaxWidth: {},
    dataStep: {},
    barPadding: {},
    roundedCorners: { type: [Number, Boolean] },
    cursor: {},
    barMinHeight1Px: { type: Boolean },
    barMinHeightZeroValue: {},
    orientation: {},
    x: {},
    y: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(d16, { expose: l7 }) {
    const o2 = m11(o), r3 = d16, a4 = v11(() => o2.data.value ?? r3.data), n = m(r3), t2 = f12();
    return y10(() => {
      x10(() => {
        var e2;
        t2.value = new StackedBar(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), b7(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), i2(n, (e2, c4) => {
      var s7;
      f(e2, c4) || (s7 = t2.value) == null || s7.setConfig(n.value);
    }), i2(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), l7({
      component: t2
    }), (e2, c4) => (_7(), h7("div", k4));
  }
});

// node_modules/@unovis/vue/components/timeline/index.js
import { defineComponent as m12, inject as d8, computed as v12, ref as f13, onMounted as _8, nextTick as x11, onUnmounted as h8, watch as u9, openBlock as k5, createElementBlock as w5 } from "vue";
var B5 = { "data-vis-component": "" };
var j3 = Timeline.selectors;
var q2 = m12({
  __name: "index",
  props: {
    data: {}
  },
  setup(l7, { expose: p10 }) {
    const t2 = d8(o), s7 = l7, a4 = v12(() => t2.data.value ?? s7.data), n = m(s7), o2 = f13();
    return _8(() => {
      x11(() => {
        var e2;
        o2.value = new Timeline(n.value), (e2 = o2.value) == null || e2.setData(a4.value), t2.update(o2.value);
      });
    }), h8(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), t2.destroy();
    }), u9(n, (e2, c4) => {
      var r3;
      f(e2, c4) || (r3 = o2.value) == null || r3.setConfig(n.value);
    }), u9(a4, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(a4.value);
    }), p10({
      component: o2
    }), (e2, c4) => (k5(), w5("div", B5));
  }
});

// node_modules/@unovis/vue/components/xy-labels/index.js
import { defineComponent as d9, inject as m13, computed as v13, ref as b8, onMounted as f14, nextTick as y11, onUnmounted as x12, watch as l3, openBlock as g6, createElementBlock as _9 } from "vue";
var k6 = { "data-vis-component": "" };
var j4 = XYLabels.selectors;
var w6 = d9({
  __name: "index",
  props: {
    color: {},
    y: {},
    xPositioning: {},
    yPositioning: {},
    labelFontSize: {},
    label: {},
    backgroundColor: {},
    cursor: {},
    labelTextBrightnessRatio: {},
    clustering: { type: Boolean },
    clusterLabel: {},
    clusterFontSize: {},
    clusterBackgroundColor: {},
    clusterCursor: {},
    clusterLabelColor: {},
    x: {},
    id: { type: Function },
    xScale: { type: [Object, Function] },
    yScale: { type: [Object, Function] },
    excludeFromDomainCalculation: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(i6, { expose: p10 }) {
    const t2 = m13(o), c4 = i6, a4 = v13(() => t2.data.value ?? c4.data), n = m(c4), o2 = b8();
    return f14(() => {
      y11(() => {
        var e2;
        o2.value = new XYLabels(n.value), (e2 = o2.value) == null || e2.setData(a4.value), t2.update(o2.value);
      });
    }), x12(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), t2.destroy();
    }), l3(n, (e2, r3) => {
      var s7;
      f(e2, r3) || (s7 = o2.value) == null || s7.setConfig(n.value);
    }), l3(a4, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(a4.value);
    }), p10({
      component: o2
    }), (e2, r3) => (g6(), _9("div", k6));
  }
});

// node_modules/@unovis/vue/components/chord-diagram/index.js
import { defineComponent as p3, inject as m14, computed as v14, ref as g7, onMounted as h9, nextTick as f15, onUnmounted as _10, watch as l4, openBlock as C5, createElementBlock as k7 } from "vue";
var D6 = { "data-vis-component": "" };
var B6 = ChordDiagram.selectors;
var I = p3({
  __name: "index",
  props: {
    angleRange: {},
    cornerRadius: {},
    highlightedNodeId: {},
    highlightedLinkIds: {},
    linkColor: {},
    linkValue: {},
    nodeLevels: {},
    nodeWidth: {},
    nodeColor: {},
    nodeLabel: {},
    nodeLabelColor: {},
    nodeLabelAlignment: {},
    padAngle: {},
    radiusScaleExponent: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(i6, { expose: u13 }) {
    const t2 = m14(o), r3 = i6, a4 = v14(() => t2.data.value ?? r3.data), n = m(r3), o2 = g7();
    return h9(() => {
      f15(() => {
        var e2;
        o2.value = new ChordDiagram(n.value), (e2 = o2.value) == null || e2.setData(a4.value), t2.update(o2.value);
      });
    }), _10(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), t2.destroy();
    }), l4(n, (e2, s7) => {
      var d16;
      f(e2, s7) || (d16 = o2.value) == null || d16.setConfig(n.value);
    }), l4(a4, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(a4.value);
    }), u13({
      component: o2
    }), (e2, s7) => (C5(), k7("div", D6));
  }
});

// node_modules/@unovis/vue/components/donut/index.js
import { defineComponent as i3, inject as m15, computed as f16, ref as v15, onMounted as g8, nextTick as y12, onUnmounted as b9, watch as l5, openBlock as _11, createElementBlock as h10 } from "vue";
var x13 = { "data-vis-component": "" };
var F5 = Donut.selectors;
var E3 = i3({
  __name: "index",
  props: {
    id: { type: Function },
    value: {},
    angleRange: {},
    padAngle: {},
    sortFunction: { type: Function },
    cornerRadius: {},
    color: {},
    radius: {},
    arcWidth: {},
    centralLabel: {},
    centralSubLabel: {},
    centralSubLabelWrap: { type: Boolean },
    showEmptySegments: { type: Boolean },
    emptySegmentAngle: {},
    showBackground: { type: Boolean },
    backgroundAngleRange: {},
    centralLabelOffsetX: {},
    centralLabelOffsetY: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(p10, { expose: d16 }) {
    const o2 = m15(o), r3 = p10, a4 = f16(() => o2.data.value ?? r3.data), n = m(r3), t2 = v15();
    return g8(() => {
      y12(() => {
        var e2;
        t2.value = new Donut(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), b9(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), l5(n, (e2, c4) => {
      var s7;
      f(e2, c4) || (s7 = t2.value) == null || s7.setConfig(n.value);
    }), l5(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), d16({
      component: t2
    }), (e2, c4) => (_11(), h10("div", x13));
  }
});

// node_modules/@unovis/vue/components/graph/index.js
import { defineComponent as p4, inject as y13, computed as m16, ref as S3, onMounted as F6, nextTick as k8, onUnmounted as b10, watch as u10, openBlock as g9, createElementBlock as h11 } from "vue";
var E4 = { "data-vis-component": "" };
var G = Graph.selectors;
var D7 = p4({
  __name: "index",
  props: {
    zoomScaleExtent: {},
    disableZoom: { type: Boolean },
    zoomEventFilter: { type: Function },
    disableDrag: { type: Boolean },
    disableBrush: { type: Boolean },
    zoomThrottledUpdateNodeThreshold: {},
    layoutType: {},
    layoutAutofit: { type: Boolean },
    layoutAutofitTolerance: {},
    layoutNonConnectedAside: { type: Boolean },
    layoutNodeGroup: {},
    layoutGroupOrder: {},
    layoutParallelNodesPerColumn: {},
    layoutParallelNodeSubGroup: {},
    layoutParallelSubGroupsPerRow: {},
    layoutParallelGroupSpacing: {},
    layoutParallelSortConnectionsByGroup: {},
    forceLayoutSettings: {},
    dagreLayoutSettings: {},
    layoutElkSettings: {},
    layoutElkNodeGroups: {},
    layoutElkGetNodeShape: { type: Function },
    linkWidth: {},
    linkStyle: {},
    linkBandWidth: {},
    linkArrow: {},
    linkStroke: {},
    linkDisabled: {},
    linkFlow: {},
    linkFlowAnimDuration: {},
    linkFlowParticleSize: {},
    linkLabel: {},
    linkLabelShiftFromCenter: {},
    linkNeighborSpacing: {},
    linkCurvature: {},
    linkHighlightOnHover: { type: Boolean },
    linkSourcePointOffset: {},
    linkTargetPointOffset: {},
    selectedLinkId: {},
    nodeSize: {},
    nodeStrokeWidth: {},
    nodeShape: {},
    nodeGaugeValue: {},
    nodeGaugeFill: {},
    nodeGaugeAnimDuration: {},
    nodeIcon: {},
    nodeIconSize: {},
    nodeLabel: {},
    nodeLabelTrim: {},
    nodeLabelTrimMode: {},
    nodeLabelTrimLength: {},
    nodeSubLabel: {},
    nodeSubLabelTrim: {},
    nodeSubLabelTrimMode: {},
    nodeSubLabelTrimLength: {},
    nodeSideLabels: {},
    nodeBottomIcon: {},
    nodeDisabled: {},
    nodeFill: {},
    nodeStroke: {},
    nodeSort: { type: Function },
    nodeEnterPosition: {},
    nodeEnterScale: {},
    nodeExitPosition: {},
    nodeExitScale: {},
    nodeEnterCustomRenderFunction: { type: Function },
    nodeUpdateCustomRenderFunction: { type: Function },
    nodePartialUpdateCustomRenderFunction: { type: Function },
    nodeExitCustomRenderFunction: { type: Function },
    nodeOnZoomCustomRenderFunction: { type: Function },
    nodeSelectionHighlightMode: {},
    selectedNodeId: {},
    selectedNodeIds: {},
    panels: {},
    onNodeDragStart: { type: Function },
    onNodeDrag: { type: Function },
    onNodeDragEnd: { type: Function },
    onZoom: { type: Function },
    onZoomStart: { type: Function },
    onZoomEnd: { type: Function },
    onLayoutCalculated: { type: Function },
    onNodeSelectionBrush: { type: Function },
    onNodeSelectionDrag: { type: Function },
    onRenderComplete: { type: Function },
    shouldDataUpdate: { type: Function },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c4, { expose: s7 }) {
    const n = y13(o), l7 = c4, t2 = m16(() => n.data.value ?? l7.data), a4 = m(l7), o2 = S3();
    return F6(() => {
      k8(() => {
        var e2;
        o2.value = new Graph(a4.value), (e2 = o2.value) == null || e2.setData(t2.value), n.update(o2.value);
      });
    }), b10(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), n.destroy();
    }), u10(a4, (e2, i6) => {
      var d16;
      f(e2, i6) || (d16 = o2.value) == null || d16.setConfig(a4.value);
    }), u10(t2, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(t2.value);
    }), s7({
      component: o2
    }), (e2, i6) => (g9(), h11("div", E4));
  }
});

// node_modules/@unovis/vue/components/nested-donut/index.js
import { defineComponent as i4, inject as m17, computed as g10, ref as v16, onMounted as y14, nextTick as f17, onUnmounted as b11, watch as c2, openBlock as B7, createElementBlock as S4 } from "vue";
var L = { "data-vis-component": "" };
var E5 = NestedDonut.selectors;
var P2 = i4({
  __name: "index",
  props: {
    angleRange: {},
    direction: {},
    value: {},
    centralLabel: {},
    centralSubLabel: {},
    centralSubLabelWrap: { type: Boolean },
    showBackground: { type: Boolean },
    sort: { type: Function },
    layers: {},
    layerSettings: {},
    layerPadding: {},
    cornerRadius: {},
    emptySegmentAngle: {},
    hideOverflowingSegmentLabels: { type: Boolean },
    segmentColor: {},
    segmentLabel: {},
    segmentLabelColor: {},
    showEmptySegments: { type: Boolean },
    showSegmentLabels: { type: Boolean },
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(p10, { expose: d16 }) {
    const o2 = m17(o), s7 = p10, a4 = g10(() => o2.data.value ?? s7.data), n = m(s7), t2 = v16();
    return y14(() => {
      f17(() => {
        var e2;
        t2.value = new NestedDonut(n.value), (e2 = t2.value) == null || e2.setData(a4.value), o2.update(t2.value);
      });
    }), b11(() => {
      var e2;
      (e2 = t2.value) == null || e2.destroy(), o2.destroy();
    }), c2(n, (e2, r3) => {
      var l7;
      f(e2, r3) || (l7 = t2.value) == null || l7.setConfig(n.value);
    }), c2(a4, () => {
      var e2;
      (e2 = t2.value) == null || e2.setData(a4.value);
    }), d16({
      component: t2
    }), (e2, r3) => (B7(), S4("div", L));
  }
});

// node_modules/@unovis/vue/components/sankey/index.js
import { defineComponent as p5, inject as b12, computed as m18, ref as h12, onMounted as y15, nextTick as g11, onUnmounted as v17, watch as s5, openBlock as f18, createElementBlock as k9 } from "vue";
var F7 = { "data-vis-component": "" };
var H = Sankey.selectors;
var M2 = p5({
  __name: "index",
  props: {
    id: { type: Function },
    heightNormalizationCoeff: {},
    exitTransitionType: {},
    enterTransitionType: {},
    highlightSubtreeOnHover: { type: Boolean },
    highlightDuration: {},
    highlightDelay: {},
    iterations: {},
    nodeSort: { type: [Function, null] },
    linkSort: { type: [Function, null] },
    nodeWidth: {},
    nodeAlign: {},
    nodeHorizontalSpacing: {},
    nodeMinHeight: {},
    nodeMaxHeight: {},
    nodePadding: {},
    showSingleNode: { type: Boolean },
    nodeCursor: {},
    nodeIcon: {},
    nodeColor: {},
    nodeFixedValue: {},
    nodeIconColor: {},
    linkColor: {},
    linkValue: {},
    linkCursor: {},
    label: {},
    subLabel: {},
    labelPosition: {},
    labelVerticalAlign: {},
    labelBackground: { type: Boolean },
    labelFit: {},
    labelMaxWidth: {},
    labelExpandTrimmedOnHover: { type: Boolean },
    labelTrimMode: {},
    labelFontSize: {},
    labelTextSeparator: {},
    labelForceWordBreak: { type: Boolean },
    labelColor: {},
    labelCursor: {},
    labelVisibility: { type: Function },
    subLabelFontSize: {},
    subLabelColor: {},
    subLabelPlacement: {},
    subLabelToLabelInlineWidthRatio: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(u13, { expose: c4 }) {
    const n = b12(o), l7 = u13, t2 = m18(() => n.data.value ?? l7.data), a4 = m(l7), o2 = h12();
    return y15(() => {
      g11(() => {
        var e2;
        o2.value = new Sankey(a4.value), (e2 = o2.value) == null || e2.setData(t2.value), n.update(o2.value);
      });
    }), v17(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), n.destroy();
    }), s5(a4, (e2, i6) => {
      var r3;
      f(e2, i6) || (r3 = o2.value) == null || r3.setConfig(a4.value);
    }), s5(t2, () => {
      var e2;
      (e2 = o2.value) == null || e2.setData(t2.value);
    }), c4({
      component: o2
    }), (e2, i6) => (f18(), k9("div", F7));
  }
});

// node_modules/@unovis/vue/components/topojson-map/index.js
import { defineComponent as d10, inject as m19, computed as v18, ref as f19, onMounted as h13, nextTick as k10, onUnmounted as y16, watch as s6, openBlock as C6, createElementBlock as F8 } from "vue";
var T2 = { "data-vis-component": "" };
var j5 = TopoJSONMap.selectors;
var D8 = d10({
  __name: "index",
  props: {
    projection: { type: [Function, Object] },
    topojson: {},
    mapFeatureName: {},
    mapFitToPoints: { type: Boolean },
    zoomFactor: {},
    disableZoom: { type: Boolean },
    zoomExtent: {},
    zoomDuration: {},
    linkWidth: {},
    linkColor: {},
    linkCursor: {},
    linkId: {},
    linkSource: { type: Function },
    linkTarget: { type: Function },
    areaId: {},
    areaColor: {},
    areaCursor: {},
    pointColor: {},
    pointRadius: {},
    pointStrokeWidth: {},
    pointCursor: {},
    longitude: {},
    latitude: {},
    pointLabel: {},
    pointLabelPosition: {},
    pointLabelTextBrightnessRatio: {},
    pointId: { type: Function },
    heatmapMode: { type: Boolean },
    heatmapModeBlurStdDeviation: {},
    heatmapModeZoomLevelThreshold: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c4, { expose: u13 }) {
    const t2 = m19(o), i6 = c4, a4 = v18(() => t2.data.value ?? i6.data), n = m(i6), e2 = f19();
    return h13(() => {
      k10(() => {
        var o2;
        e2.value = new TopoJSONMap(n.value), (o2 = e2.value) == null || o2.setData(a4.value), t2.update(e2.value);
      });
    }), y16(() => {
      var o2;
      (o2 = e2.value) == null || o2.destroy(), t2.destroy();
    }), s6(n, (o2, r3) => {
      var p10;
      f(o2, r3) || (p10 = e2.value) == null || p10.setConfig(n.value);
    }), s6(a4, () => {
      var o2;
      (o2 = e2.value) == null || o2.setData(a4.value);
    }), u13({
      component: e2
    }), (o2, r3) => (C6(), F8("div", T2));
  }
});

// node_modules/@unovis/vue/components/tooltip/index.js
import { defineComponent as i5, inject as p6, ref as m20, onMounted as u11, nextTick as f20, onUnmounted as d11, watch as v19, openBlock as _12, createElementBlock as h14 } from "vue";
var g12 = { "data-vis-tooltip": "" };
var T3 = Tooltip.selectors;
var z2 = i5({
  __name: "index",
  props: {
    components: {},
    container: {},
    followCursor: { type: Boolean },
    allowHover: { type: Boolean },
    horizontalPlacement: {},
    horizontalShift: {},
    verticalPlacement: {},
    verticalShift: {},
    triggers: {},
    attributes: {},
    className: {},
    data: {}
  },
  setup(c4, { expose: l7 }) {
    const r3 = p6(s), t2 = m(c4), o2 = m20();
    return u11(() => {
      f20(() => {
        o2.value = new Tooltip(t2.value), r3.update(o2.value);
      });
    }), d11(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), r3.destroy();
    }), v19(t2, (e2, n) => {
      var s7;
      f(e2, n) || (s7 = o2.value) == null || s7.setConfig(t2.value);
    }), l7({
      component: o2
    }), (e2, n) => (_12(), h14("div", g12));
  }
});

// node_modules/@unovis/vue/components/annotations/index.js
import { defineComponent as p7, inject as u12, ref as m21, onMounted as d12, nextTick as l6, onUnmounted as f21, watch as v20, openBlock as _13, createElementBlock as x14 } from "vue";
var y17 = { "data-vis-annotations": "" };
var P3 = Annotations.selectors;
var b13 = p7({
  __name: "index",
  props: {
    items: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c4, { expose: i6 }) {
    const n = u12(t), t2 = m(c4), o2 = m21();
    return d12(() => {
      l6(() => {
        o2.value = new Annotations(t2.value), n.update(o2.value);
      });
    }), f21(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy(), n.destroy();
    }), v20(t2, (e2, s7) => {
      var r3;
      f(e2, s7) || (r3 = o2.value) == null || r3.setConfig(t2.value);
    }), i6({
      component: o2
    }), (e2, s7) => (_13(), x14("div", y17));
  }
});

// node_modules/@unovis/vue/html-components/leaflet-map/index.js
import { defineComponent as d13, computed as f22, ref as p8, onMounted as m22, nextTick as y18, onUnmounted as v21, watch as M3, openBlock as L2, createElementBlock as B8 } from "vue";
var F9 = LeafletMap.selectors;
var w7 = d13({
  __name: "index",
  props: {
    width: {},
    height: {},
    flyToDuration: {},
    fitViewPadding: {},
    zoomDuration: {},
    initialBounds: {},
    fitBoundsOnUpdate: {},
    fitViewOnInit: { type: Boolean },
    fitViewOnUpdate: { type: Boolean },
    style: {},
    styleDarkTheme: {},
    accessToken: {},
    attribution: {},
    renderer: {},
    onMapInitialized: { type: Function },
    onMapMoveZoom: { type: Function },
    onMapMoveStart: { type: Function },
    onMapMoveEnd: { type: Function },
    onMapZoomStart: { type: Function },
    onMapZoomEnd: { type: Function },
    onMapClick: { type: Function },
    pointLongitude: {},
    pointLatitude: {},
    pointId: {},
    pointShape: {},
    pointColor: {},
    pointRadius: {},
    pointLabel: {},
    pointLabelColor: {},
    pointBottomLabel: {},
    pointCursor: {},
    pointRingWidth: {},
    selectedPointId: {},
    clusterColor: {},
    clusterRadius: {},
    clusterLabel: {},
    clusterLabelColor: {},
    clusterBottomLabel: {},
    clusterRingWidth: {},
    clusterBackground: { type: Boolean },
    clusterExpandOnClick: { type: Boolean },
    clusteringDistance: {},
    colorMap: {},
    topoJSONLayer: {},
    tooltip: {},
    ariaLabel: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(u13, { expose: c4 }) {
    const a4 = u13, s7 = f22(() => a4.data), o2 = m(a4), e2 = p8(), n = p8();
    return m22(() => {
      y18(() => {
        n.value && (e2.value = new LeafletMap(n.value, o2.value, s7.value));
      });
    }), v21(() => {
      var t2;
      (t2 = e2.value) == null || t2.destroy();
    }), M3(o2, (t2, i6) => {
      var l7;
      f(t2, i6) || (l7 = e2.value) == null || l7.setConfig(o2.value);
    }), c4({
      component: e2
    }), (t2, i6) => (L2(), B8("div", {
      "data-vis-leaflet-map": "",
      ref_key: "elRef",
      ref: n
    }, null, 512));
  }
});

// node_modules/@unovis/vue/html-components/leaflet-flow-map/index.js
import { defineComponent as d14, computed as f23, ref as r2, onMounted as m23, nextTick as y19, onUnmounted as L3, watch as M4, openBlock as v22, createElementBlock as w8 } from "vue";
var k11 = LeafletFlowMap.selectors;
var b14 = d14({
  __name: "index",
  props: {
    sourceLongitude: {},
    sourceLatitude: {},
    targetLongitude: {},
    targetLatitude: {},
    sourcePointRadius: {},
    sourcePointColor: {},
    flowParticleColor: {},
    flowParticleRadius: {},
    flowParticleSpeed: {},
    flowParticleDensity: {},
    onSourcePointClick: { type: Function },
    onSourcePointMouseEnter: { type: Function },
    onSourcePointMouseLeave: { type: Function },
    width: {},
    height: {},
    flyToDuration: {},
    fitViewPadding: {},
    zoomDuration: {},
    initialBounds: {},
    fitBoundsOnUpdate: {},
    fitViewOnInit: { type: Boolean },
    fitViewOnUpdate: { type: Boolean },
    style: {},
    styleDarkTheme: {},
    accessToken: {},
    attribution: {},
    renderer: {},
    onMapInitialized: { type: Function },
    onMapMoveZoom: { type: Function },
    onMapMoveStart: { type: Function },
    onMapMoveEnd: { type: Function },
    onMapZoomStart: { type: Function },
    onMapZoomEnd: { type: Function },
    onMapClick: { type: Function },
    pointLongitude: {},
    pointLatitude: {},
    pointId: {},
    pointShape: {},
    pointColor: {},
    pointRadius: {},
    pointLabel: {},
    pointLabelColor: {},
    pointBottomLabel: {},
    pointCursor: {},
    pointRingWidth: {},
    selectedPointId: {},
    clusterColor: {},
    clusterRadius: {},
    clusterLabel: {},
    clusterLabelColor: {},
    clusterBottomLabel: {},
    clusterRingWidth: {},
    clusterBackground: { type: Boolean },
    clusterExpandOnClick: { type: Boolean },
    clusteringDistance: {},
    colorMap: {},
    topoJSONLayer: {},
    tooltip: {},
    ariaLabel: {},
    duration: {},
    events: {},
    attributes: {},
    data: {}
  },
  setup(c4, { expose: p10 }) {
    const i6 = c4, s7 = f23(() => i6.data), t2 = m(i6), e2 = r2(), n = r2();
    return m23(() => {
      y19(() => {
        n.value && (e2.value = new LeafletFlowMap(n.value, t2.value, s7.value));
      });
    }), L3(() => {
      var o2;
      (o2 = e2.value) == null || o2.destroy();
    }), M4(t2, (o2, a4) => {
      var l7;
      f(o2, a4) || (l7 = e2.value) == null || l7.setConfig(t2.value);
    }), p10({
      component: e2
    }), (o2, a4) => (v22(), w8("div", {
      "data-vis-leaflet-flow-map": "",
      ref_key: "elRef",
      ref: n
    }, null, 512));
  }
});

// node_modules/@unovis/vue/html-components/bullet-legend/index.js
import { defineComponent as c3, computed as p9, ref as d15, onMounted as m24, nextTick as f24, onUnmounted as v23, watch as _14, openBlock as b15, createElementBlock as x15 } from "vue";
var P4 = BulletLegend.selectors;
var S5 = c3({
  __name: "index",
  props: {
    items: {},
    labelClassName: {},
    onLegendItemClick: { type: Function },
    labelFontSize: {},
    labelMaxWidth: {},
    bulletSize: {},
    bulletShape: {},
    orientation: {},
    renderIntoProvidedDomNode: { type: Boolean },
    data: {}
  },
  setup(s7, { expose: i6 }) {
    const l7 = s7;
    p9(() => l7.data);
    const t2 = m(l7), o2 = d15(), n = d15();
    return m24(() => {
      f24(() => {
        n.value && (o2.value = new BulletLegend(n.value, { ...t2.value, renderIntoProvidedDomNode: true }));
      });
    }), v23(() => {
      var e2;
      (e2 = o2.value) == null || e2.destroy();
    }), _14(t2, (e2, a4) => {
      var r3;
      f(e2, a4) || (r3 = o2.value) == null || r3.update(t2.value);
    }), i6({
      component: o2
    }), (e2, a4) => (b15(), x15("div", {
      "data-vis-bullet-legend": "",
      ref_key: "elRef",
      ref: n
    }, null, 512));
  }
});

// node_modules/@unovis/vue/index.js
(function() {
  "use strict";
  try {
    if (typeof document < "u") {
      var e2 = document.createElement("style");
      e2.appendChild(document.createTextNode(".unovis-xy-container,.unovis-single-container{display:block;position:relative;width:100%}[data-vis-leaflet-map],[data-vis-leaflet-flow-map]{display:block;position:relative}[data-vis-bullet-legend]{display:block}")), document.head.appendChild(e2);
    }
  } catch (t2) {
    console.error("vite-plugin-css-injected-by-js", t2);
  }
})();
export {
  b13 as VisAnnotations,
  P3 as VisAnnotationsSelectors,
  P as VisArea,
  D2 as VisAreaSelectors,
  O as VisAxis,
  M as VisAxisSelectors,
  E as VisBrush,
  D3 as VisBrushSelectors,
  S5 as VisBulletLegend,
  P4 as VisBulletLegendSelectors,
  I as VisChordDiagram,
  B6 as VisChordDiagramSelectors,
  A2 as VisCrosshair,
  q as VisCrosshairSelectors,
  E3 as VisDonut,
  F5 as VisDonutSelectors,
  E2 as VisFreeBrush,
  D4 as VisFreeBrushSelectors,
  D7 as VisGraph,
  G as VisGraphSelectors,
  D5 as VisGroupedBar,
  w2 as VisGroupedBarSelectors,
  b14 as VisLeafletFlowMap,
  k11 as VisLeafletFlowMapSelectors,
  w7 as VisLeafletMap,
  F9 as VisLeafletMapSelectors,
  S2 as VisLine,
  O2 as VisLineSelectors,
  P2 as VisNestedDonut,
  E5 as VisNestedDonutSelectors,
  M2 as VisSankey,
  H as VisSankeySelectors,
  z as VisScatter,
  w3 as VisScatterSelectors,
  b as VisSingleContainer,
  w4 as VisStackedBar,
  j2 as VisStackedBarSelectors,
  q2 as VisTimeline,
  j3 as VisTimelineSelectors,
  z2 as VisTooltip,
  T3 as VisTooltipSelectors,
  D8 as VisTopoJSONMap,
  j5 as VisTopoJSONMapSelectors,
  $ as VisXYContainer,
  w6 as VisXYLabels,
  j4 as VisXYLabelsSelectors
};
//# sourceMappingURL=@unovis_vue.js.map
